---
// Array com todas as imagens de depoimentos
const depoimentos = Array.from({ length: 19 }, (_, i) => ({
  id: i + 1,
  imagem: `/src/images/depoimento_${String(i + 1).padStart(2, '0')}.png`
}));
---

<section id="depoimentos" class="py-20 bg-gray-50">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-secondary mb-4">Estamos desde 2015</h2>
      <div class="flex justify-center mb-4">
        <div class="flex">
          {[...Array(5)].map(() => (
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          ))}
        </div>
      </div>
      <p class="text-gray-600 max-w-2xl mx-auto mb-8">
        Mais de 10.000 avaliações 5 estrelas em diversas plataformas. Confira o que nossos clientes dizem sobre nós!
      </p>
    </div>
    
    <!-- Carrossel de Depoimentos -->
    <div class="relative">
      <!-- Botões de navegação -->
      <button id="prev-button" class="absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-white p-2 rounded-full shadow-md text-primary hover:text-secondary transition-colors -ml-4 md:ml-0">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      
      <div id="carousel-container" class="overflow-hidden">
        <div id="carousel-track" class="flex transition-transform duration-500 ease-in-out">
          {depoimentos.map((depoimento, index) => (
            <div class="carousel-item flex-shrink-0 px-2">
              <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <img 
                  src={index < 4 ? depoimento.imagem : ''} 
                  alt={`Depoimento ${depoimento.id}`}
                  class="w-full h-auto"
                  loading="lazy"
                  data-src={depoimento.imagem}
                />
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <button id="next-button" class="absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-white p-2 rounded-full shadow-md text-primary hover:text-secondary transition-colors -mr-4 md:mr-0">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
      
      <!-- Indicadores -->
      <div class="flex justify-center mt-6 space-x-2" id="carousel-indicators">
        <!-- Indicadores serão gerados via JavaScript -->
      </div>
    </div>
    
    <div class="mt-12 text-center">
      <a 
        href="https://g.page/r/CQCZtYuXvBZeEAI/review" 
        target="_blank" 
        rel="noopener noreferrer"
        class="bg-primary hover:bg-primary/90 text-white font-bold py-3 px-6 rounded-full transition-colors inline-flex items-center"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        Deixe sua avaliação no Google
      </a>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carouselTrack = document.getElementById('carousel-track');
    const prevButton = document.getElementById('prev-button');
    const nextButton = document.getElementById('next-button');
    const carouselItems = document.querySelectorAll('.carousel-item');
    const indicatorsContainer = document.getElementById('carousel-indicators');
    
    if (!carouselTrack || !prevButton || !nextButton || !indicatorsContainer) return;
    
    let currentIndex = 0;
    let itemsPerView = 1;
    let totalSlides = 0;
    
    // Função para determinar quantos itens mostrar por visualização
    const updateItemsPerView = () => {
      if (window.innerWidth >= 1024) {
        itemsPerView = 4; // Desktop grande
      } else if (window.innerWidth >= 768) {
        itemsPerView = 3; // Tablet
      } else if (window.innerWidth >= 640) {
        itemsPerView = 2; // Mobile grande
      } else {
        itemsPerView = 1; // Mobile pequeno
      }
      
      // Ajustar a largura de cada item para garantir que caibam exatamente itemsPerView itens na tela
      carouselItems.forEach(item => {
        item.style.width = `${100 / itemsPerView}%`;
      });
      
      totalSlides = Math.ceil(carouselItems.length / itemsPerView);
      updateIndicators();
      goToSlide(0); // Reset para o primeiro slide quando o tamanho da tela muda
    };
    
    // Função para criar indicadores
    const updateIndicators = () => {
      indicatorsContainer.innerHTML = '';
      
      for (let i = 0; i < totalSlides; i++) {
        const indicator = document.createElement('button');
        indicator.classList.add('w-3', 'h-3', 'rounded-full', 'bg-gray-300');
        
        if (i === currentIndex) {
          indicator.classList.add('bg-primary');
        }
        
        indicator.addEventListener('click', () => goToSlide(i));
        indicatorsContainer.appendChild(indicator);
      }
    };
    
    // Função para ir para um slide específico
    const goToSlide = (index) => {
      if (index < 0) {
        index = totalSlides - 1;
      } else if (index >= totalSlides) {
        index = 0;
      }
      
      currentIndex = index;
      
      // Calcular o deslocamento com base no índice atual e no número de itens por visualização
      // Isso garante que o deslocamento seja exatamente um conjunto completo de imagens
      const offset = -(currentIndex * 100);
      carouselTrack.style.transform = `translateX(${offset}%)`;
      
      // Atualizar indicadores
      const indicators = indicatorsContainer.querySelectorAll('button');
      indicators.forEach((indicator, i) => {
        if (i === currentIndex) {
          indicator.classList.add('bg-primary');
          indicator.classList.remove('bg-gray-300');
        } else {
          indicator.classList.remove('bg-primary');
          indicator.classList.add('bg-gray-300');
        }
      });
      
      // Lazy loading para imagens visíveis
      const startIdx = currentIndex * itemsPerView;
      const endIdx = Math.min(startIdx + itemsPerView, carouselItems.length);
      
      for (let i = startIdx; i < endIdx; i++) {
        const img = carouselItems[i].querySelector('img');
        if (img && img.dataset.src && img.src !== img.dataset.src) {
          img.src = img.dataset.src;
        }
      }
    };
    
    // Event listeners para os botões
    prevButton.addEventListener('click', () => goToSlide(currentIndex - 1));
    nextButton.addEventListener('click', () => goToSlide(currentIndex + 1));
    
    // Atualizar quando a janela for redimensionada
    window.addEventListener('resize', updateItemsPerView);
    
    // Inicializar o carrossel
    updateItemsPerView();
    
    // Auto-play opcional
    let autoplayInterval;
    
    const startAutoplay = () => {
      autoplayInterval = setInterval(() => {
        goToSlide(currentIndex + 1);
      }, 5000); // Muda a cada 5 segundos
    };
    
    const stopAutoplay = () => {
      clearInterval(autoplayInterval);
    };
    
    // Iniciar autoplay
    startAutoplay();
    
    // Parar autoplay quando o usuário interagir com o carrossel
    carouselTrack.addEventListener('mouseenter', stopAutoplay);
    prevButton.addEventListener('mouseenter', stopAutoplay);
    nextButton.addEventListener('mouseenter', stopAutoplay);
    indicatorsContainer.addEventListener('mouseenter', stopAutoplay);
    
    // Reiniciar autoplay quando o usuário parar de interagir
    carouselTrack.addEventListener('mouseleave', startAutoplay);
    prevButton.addEventListener('mouseleave', startAutoplay);
    nextButton.addEventListener('mouseleave', startAutoplay);
    indicatorsContainer.addEventListener('mouseleave', startAutoplay);
    
    // Swipe para dispositivos móveis
    let touchStartX = 0;
    let touchEndX = 0;
    
    carouselTrack.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
      stopAutoplay();
    }, { passive: true });
    
    carouselTrack.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
      startAutoplay();
    }, { passive: true });
    
    const handleSwipe = () => {
      const swipeThreshold = 50;
      if (touchEndX < touchStartX - swipeThreshold) {
        // Swipe para a esquerda
        goToSlide(currentIndex + 1);
      } else if (touchEndX > touchStartX + swipeThreshold) {
        // Swipe para a direita
        goToSlide(currentIndex - 1);
      }
    };
  });
</script>
